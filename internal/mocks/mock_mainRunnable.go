// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MainRunnable is an autogenerated mock type for the Runnable type
type MainRunnable struct {
	mock.Mock
}

type MainRunnable_Expecter struct {
	mock *mock.Mock
}

func (_m *MainRunnable) EXPECT() *MainRunnable_Expecter {
	return &MainRunnable_Expecter{mock: &_m.Mock}
}

// GetInitValues provides a mock function with given fields:
func (_m *MainRunnable) GetInitValues() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInitValues")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MainRunnable_GetInitValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInitValues'
type MainRunnable_GetInitValues_Call struct {
	*mock.Call
}

// GetInitValues is a helper method to define mock.On call
func (_e *MainRunnable_Expecter) GetInitValues() *MainRunnable_GetInitValues_Call {
	return &MainRunnable_GetInitValues_Call{Call: _e.mock.On("GetInitValues")}
}

func (_c *MainRunnable_GetInitValues_Call) Run(run func()) *MainRunnable_GetInitValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MainRunnable_GetInitValues_Call) Return(_a0 error) *MainRunnable_GetInitValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MainRunnable_GetInitValues_Call) RunAndReturn(run func() error) *MainRunnable_GetInitValues_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields:
func (_m *MainRunnable) Run() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MainRunnable_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MainRunnable_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MainRunnable_Expecter) Run() *MainRunnable_Run_Call {
	return &MainRunnable_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MainRunnable_Run_Call) Run(run func()) *MainRunnable_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MainRunnable_Run_Call) Return(_a0 error) *MainRunnable_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MainRunnable_Run_Call) RunAndReturn(run func() error) *MainRunnable_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMainRunnable creates a new instance of MainRunnable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMainRunnable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MainRunnable {
	mock := &MainRunnable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
